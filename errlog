#! /usr/local/bin/perl

use strict;
use warnings;
no warnings 'uninitialized';
use Term::ANSIColor qw(colored);

							our @UNUSEDARRAY = q[
perllib/Athena/Apache/ASP.pm
perllib/Athena/Apache/common.pm
 \\[long_running_sql\\]
.*
							];
							our @HILITE = map {qr/$_/} grep {/\S/} split "\n", q[
<\*>
							];
							our @EXCEPTIONS = map {qr/$_/} grep {/\S/} split "\n", q[
							];
							our @IGNORES = map {qr/$_/} grep {/\S/} split "\n", q[
FileRoot
load permission
							];
							our @EXCLUDES = map {qr/$_/} grep {/\S/} split "\n", q[
 \\[long_running_sql\\]
Prototype mismatch.*none vs.*onstant
 \\[athenatimer\\]
							];
if (-e "$ENV{HOME}/.errlogconf.pl") {
	do "$ENV{HOME}/.errlogconf.pl";
}

# CHECK ARGS
my ($server) = @ARGV;
die "Usage: errlog servername\n" unless @ARGV=1 && $$ARGV[0];

# VERIFY LOG EXISTS
my $logname = "/usr/local/athena/var/apachelogs/".$server."_error";
die "Logs not found for server $server" unless -e $logname;

# UPDATE SCREEN TITLE
my $shortserver = $server;
$shortserver =~ s/$ENV{USER}//;
print STDERR "\033kerr:$shortserver\033\\";

# EXPLAIN FILTERS
print STDERR colored( "Highlight:\n", "bold black");
map {
	print STDERR colored("$_\n","bold blue");
} @HILITE;
print STDERR colored( "Keep\n", "bold black");
map {
	print STDERR colored("$_\n","green");
} @EXCEPTIONS;
print STDERR colored( "Grey And Truncate\n", "bold black");
map {
	print STDERR colored("$_\n","yellow");
} @IGNORES;
print STDERR colored( "Exclude Entirely\n", "bold black");
map {
	print STDERR colored("$_\n","red");
} @EXCLUDES;

# USEFUL FILTER FUNCTIONS
sub anymatch  { my $line = shift; return  scalar grep {$line =~ /$_/} @_; }
sub nonematch { my $line = shift; return !scalar grep {$line =~ /$_/} @_; }

# GET LOGFILE
open(LOG, "tail -f $logname -n 0|");

$| = 1;
# CRUNCH LOGS
while(my $line = <LOG>) {
	next if $line =~ /^\n$/;
	# CUT EXCLUDES
	next if anymatch($line,@EXCLUDES) && nonematch($line,@EXCEPTIONS);
	# TRUNCATE IGNORES
	$line = colored(substr($line,0,70)."...\n","bold black") if anymatch($line,@IGNORES) && nonematch($line,@EXCEPTIONS);
	# HILIGHT HILITES
	$line =~ s/($_)/colored($1,"bold blue")/eg foreach (@HILITE);
	print $line;
}
